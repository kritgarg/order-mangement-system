// src/lib/convert.ts
import path from "path";
import fsPromises from "fs/promises";
import { createRequire } from "module";
import fs from "fs";
import { glob } from "glob";
import { execa } from "execa";
import * as prettier from "prettier";

// src/lib/utils.ts
import chalk from "chalk";
var logger = {
  error(...args) {
    console.log(chalk.red(...args));
  },
  warn(...args) {
    console.log(chalk.yellow(...args));
  },
  info(...args) {
    console.log(chalk.cyan(...args));
  },
  success(...args) {
    console.log(chalk.green(...args));
  }
};

// src/lib/convert.ts
var require2 = createRequire(import.meta.url);
var TEXT_TO_REPLACE = "// COMMENT-TO-REPLACE";
async function removeComments(filePaths) {
  return Promise.all(
    filePaths.map(async (file) => {
      try {
        let content = await fsPromises.readFile(file, "utf8");
        content = content.split("\n").map((line) => line.trim() === TEXT_TO_REPLACE ? "" : line).join("\n");
        await fsPromises.writeFile(file, content);
      } catch (error) {
        logger.error(`${error.message}`);
      }
    })
  );
}
async function addComments(filePaths) {
  return Promise.all(
    filePaths.map(async (file) => {
      let content = await fsPromises.readFile(file, "utf8");
      content = content.split("\n").map((line) => line.trim() === "" ? TEXT_TO_REPLACE : line).join("\n");
      await fsPromises.writeFile(file, content);
    })
  );
}
async function getFilePaths(srcDir, pattern) {
  return glob(path.join(srcDir, pattern), {
    ignore: path.join(srcDir, `/node_modules/**`)
  });
}
async function preetify(filePaths) {
  try {
    const promises = filePaths.map(async (filePath) => {
      const text = await fsPromises.readFile(filePath, "utf8");
      const options = await prettier.resolveConfig(filePath);
      const formatted = await prettier.format(text, options ?? { parser: "babel" });
      await fsPromises.writeFile(filePath, formatted);
    });
    await Promise.all(promises);
  } catch (err) {
  }
}
async function convertTsxToJsx(srcDir, dstDir) {
  try {
    if (!fs.existsSync(srcDir))
      throw new Error("Source directory does not exist.");
    const tsxFiles = await getFilePaths(srcDir, `/**/*.{ts,tsx}`);
    await addComments(tsxFiles);
    const srcFiles = await glob(path.join(srcDir, "/**/*.{ts,tsx}"));
    try {
      if (srcFiles.length > 0) {
        const tscPath = require2.resolve("typescript/lib/tsc");
        const command = ["node", tscPath, "--jsx", "preserve", "-t", "esnext", "--outDir", dstDir, "--noEmit", "false", ...srcFiles];
        await execa(command[0], command.slice(1), { stdout: "ignore", stderr: "ignore" });
      }
    } catch (error) {
    }
    const jsxFiles = await getFilePaths(dstDir, `/**/*.{js,jsx}`);
    await removeComments([...tsxFiles, ...jsxFiles]);
    await preetify(jsxFiles);
  } catch (error) {
    logger.error(`${error.message}`);
  }
}
export {
  convertTsxToJsx
};
//# sourceMappingURL=index.js.map
{"version":3,"sources":["../src/lib/convert.ts","../src/lib/utils.ts"],"sourcesContent":["import path from 'node:path'\nimport fsPromises from 'node:fs/promises'\nimport { createRequire } from 'node:module'\nimport fs from 'node:fs'\nimport { glob } from 'glob'\nimport { execa } from 'execa'\nimport * as prettier from 'prettier'\nimport { logger } from './utils'\n\nconst require = createRequire(import.meta.url)\n\n/**\n * The text to be replaced in the file content.\n * @type {string}\n */\nconst TEXT_TO_REPLACE: string = '// COMMENT-TO-REPLACE'\n\n/**\n * Removes comments matching a specific text in the given file paths.\n * @param {fs.PathLike[] | fsPromises.FileHandle[]} filePaths - Array of file paths or file handles.\n * @returns {Promise<void[]>} A promise that resolves when all files have been processed.\n */\nasync function removeComments(filePaths: any[]): Promise<void[]> {\n  return Promise.all(\n    filePaths.map(async (file: fs.PathLike | fsPromises.FileHandle) => {\n      try {\n        let content = await fsPromises.readFile(file, 'utf8')\n        content = content\n          .split('\\n')\n          .map(line => (line.trim() === TEXT_TO_REPLACE ? '' : line))\n          .join('\\n')\n        await fsPromises.writeFile(file, content)\n      }\n      catch (error: any) {\n        logger.error(`${error.message}`)\n      }\n    }),\n  )\n}\n\n/**\n * Adds comments to the files where lines are empty.\n * @param {fs.PathLike[] | fsPromises.FileHandle[]} filePaths - Array of file paths or file handles.\n * @returns {Promise<void[]>} A promise that resolves when all files have been processed.\n */\nasync function addComments(filePaths: any[]): Promise<void[]> {\n  return Promise.all(\n    filePaths.map(async (file) => {\n      let content = await fsPromises.readFile(file, 'utf8')\n      content = content\n        .split('\\n')\n        .map(line => (line.trim() === '' ? TEXT_TO_REPLACE : line))\n        .join('\\n')\n      await fsPromises.writeFile(file, content)\n    }),\n  )\n}\n\n/**\n * Retrieves file paths matching a pattern in the source directory.\n * @param {string} srcDir - Source directory path.\n * @param {string} pattern - Glob pattern to match files.\n * @returns {Promise<string[]>} A promise that resolves with an array of matching file paths.\n */\nasync function getFilePaths(srcDir: string, pattern: string): Promise<string[]> {\n  return glob(path.join(srcDir, pattern), {\n    ignore: path.join(srcDir, `/node_modules/**`),\n  })\n}\n\nasync function preetify(filePaths: string[]) {\n  try {\n    const promises = filePaths.map(async (filePath) => {\n      const text = await fsPromises.readFile(filePath, 'utf8')\n      const options = await prettier.resolveConfig(filePath)\n      const formatted = await prettier.format(text, options ?? { parser: 'babel' })\n      await fsPromises.writeFile(filePath, formatted)\n    })\n    await Promise.all(promises)\n  }\n  catch (err) {}\n}\n\n/**\n * Converts TypeScript (ts/tsx) files to JavaScript (js/jsx) files in a source directory.\n * Removes and adds comments as specified, compiles TypeScript to JavaScript, and runs Prettier.\n * @param {string} srcDir - Source directory path containing TypeScript files.\n * @param {string} dstDir - Destination directory path for the compiled JavaScript files.\n * @returns {Promise<void>} A promise that resolves when the conversion process is complete.\n */\nexport async function convertTsxToJsx(srcDir: string, dstDir: string): Promise<void> {\n  try {\n    if (!fs.existsSync(srcDir))\n      throw new Error('Source directory does not exist.')\n\n    const tsxFiles = await getFilePaths(srcDir, `/**/*.{ts,tsx}`)\n\n    await addComments(tsxFiles)\n\n    const srcFiles = await glob(path.join(srcDir, '/**/*.{ts,tsx}'))\n\n    try {\n      if (srcFiles.length > 0) {\n        const tscPath = require.resolve('typescript/lib/tsc')\n        const command = ['node', tscPath, '--jsx', 'preserve', '-t', 'esnext', '--outDir', dstDir, '--noEmit', 'false', ...srcFiles]\n        await execa(command[0], command.slice(1), { stdout: 'ignore', stderr: 'ignore' })\n      }\n    }\n    catch (error) {\n      // logger.error(error)\n    }\n\n    const jsxFiles = await getFilePaths(dstDir, `/**/*.{js,jsx}`)\n\n    await removeComments([...tsxFiles, ...jsxFiles])\n\n    // Run prettier on javascript files\n    await preetify(jsxFiles)\n  }\n  catch (error: any) {\n    logger.error(`${error.message}`)\n  }\n}\n","/* eslint-disable no-console */\nimport chalk from 'chalk'\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args))\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args))\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args))\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args))\n  },\n}\n"],"mappings":"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","names":["require"]}